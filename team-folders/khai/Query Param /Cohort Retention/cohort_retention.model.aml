Model cohort_retention {
  type: 'query'
  label: 'Cohort Retention'
  description: ''
  data_source_name: 'demodb'
  dimension cohort_dynamic {
    label: 'Cohort Dynamic'
    type: 'date'
    hidden: false
    definition: @sql {{ #SOURCE.cohort_dynamic }};;
  }
  dimension month_number {
    label: 'Month Number'
    type: 'text'
    hidden: false
    definition: @sql {{ #SOURCE.month_number }};;
  }
  dimension percentage {
    label: 'Percentage'
    type: 'number'
    hidden: false
    definition: @sql {{ #SOURCE.percentage }};;
  }

  dimension total_users {
    label: 'Total Users'
    type: 'number'
    description: 'Cohort Size'
    definition: @sql {{ #SOURCE.total_users }} ;;
  }

  dimension num_users {
    label: 'Number of Users'
    type: 'number'
    description: 'Value of Cohort'
    definition: @sql {{ #SOURCE.num_users }};;
  }

  param param_cohort_dynamic {
    label: 'Param Cohort Dynamic'
    type: 'text'
    allowed_values: ['day', 'week', 'month', 'quarter', 'year']
  }

  owner: 'khai.to+demo4@holistics.io'
  query: @sql
    with cohort_dfn as (
        select o.user_id
            , date_trunc({{ param_cohort_dynamic }}, min(o.created_at)::date)::date as cohort_dynamic
        from ecommerce.orders as o
        group by 1
    ),
    
    cohort_size as (
        select c.cohort_dynamic
            , count(distinct(c.user_id)) as total_users 
        from cohort_dfn as c group by 1
    ),
    
    retention_by_user_by_month as (
        select o.user_id
            , ((date_part('year', o.created_at::date) - date_part('year', c.cohort_dynamic::date)) * 12 + (date_part('month', o.created_at::date) - date_part('month', c.cohort_dynamic::date))) as month_number 
        from ecommerce.orders as o left join cohort_dfn as c on o.user_id = c.user_id
    ),
    
    cohort_retention as (
        select c.cohort_dynamic 
            , concat('Month', ' ', to_char(r.month_number, 'fm00')) as month_number 
            , count(distinct(r.user_id)) as num_users 
        from retention_by_user_by_month as r
            left join cohort_dfn as c on r.user_id = c.user_id 
        group by 1,2
    )
    
    select
      cr.cohort_dynamic,
      s.total_users,
      cr.month_number,
      cr.num_users::float,
      cr.num_users::float / s.total_users as percentage
    from cohort_retention cr
    left join cohort_size s ON cr.cohort_dynamic = s.cohort_dynamic
    where cr.cohort_dynamic IS NOT NULL
    order by 1, 3;;

  models: [
  ]
}
