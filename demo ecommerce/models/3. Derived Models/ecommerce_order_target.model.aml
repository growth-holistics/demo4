import '../1. Table Models/ecommerce_orders.model.aml' {
  ecommerce_orders as model__ecommerce_orders
}

Model ecommerce_order_target {
  type: 'query'
  label: 'Ecommerce Order Target'
  description: ''
  data_source_name: 'demodb'
  dimension report_time {
    label: 'Report Time'
    type: 'datetime'
    hidden: false
    definition: @sql {{ #SOURCE.report_time }};;
  }
  dimension total_orders {
    label: 'Total Orders'
    type: 'number'
    hidden: false
    definition: @sql {{ #SOURCE.total_orders }};;
  }
  dimension total_delivered_orders {
    label: 'Total Delivered Orders'
    type: 'number'
    hidden: false
    definition: @sql {{ #SOURCE.total_delivered_orders }};;
  }
  dimension total_cancelled_orders {
    label: 'Total Cancelled Orders'
    type: 'number'
    hidden: false
    definition: @sql {{ #SOURCE.total_cancelled_orders }};;
  }
  dimension order_target {
    label: 'Order Target'
    type: 'number'
    hidden: false
    definition: @sql {{ #SOURCE.order_target }};;
  }

  owner: 'vincent+demo4@holistics.io'
  query: @sql
    with base as(
      select
      date_trunc('month',{{ #o.created_at }}) as report_time
      , count({{ #o.id }}) as orders
      , count(
      case 
          when {{ #o.status }} = 'delivered' then {{ #o.id }}
          else null
          end 
        ) as delivered_orders
      , count(
          case 
          when {{ #o.status }} = 'cancelled' then {{ #o.id }}
          else null
          end 
        ) as cancelled_orders
      from {{ #ecommerce_orders o }}
      group by {{ #o.created_at }}
    )
    
    , orders as (
      select 
        report_time
        , sum(orders) as total_orders 
        , sum(delivered_orders) as total_delivered_orders
        , sum(cancelled_orders) as total_cancelled_orders
        from base 
        group by 1 
        order by 1 asc
        )
        
      select 
      report_time
      , total_orders
      , total_delivered_orders
      , total_cancelled_orders
      -- , sum(total_orders) over (order by report_time ROWS BETWEEN unbounded preceding and current row) + 100 as order_target
      , 2000 as order_target
      from orders 
      group by 1,2,3,4
      ;;
  models: [
    model__ecommerce_orders
  ]
}
