Model transform_order_items {
  type: 'query'
  label: 'Order Items'
  description: 'Derived model to report all Ecommerce metrics'
  owner: 'ha.pham+demo4@holistics.io'
  data_source_name: 'demodb'

  models: [
    ecommerce_users
    ,
    ecommerce_orders
    ,
    ecommerce_order_items
    ,
    ecommerce_products
  ]


  query: @sql
    select 
      {{#o.id}} as order_id
      , {{#o.user_id}}
      , {{#o.status }} as order_status
      , {{#o.created_at}} as order_created_at
      , {{#o.delivery_attempts}}
      , {{#o.discount}}
      , {{#oi.quantity}}
      , {{#oi.product_id}}
      , {{#p.price}}
      , {{#p.merchant_id}}
    from {{ #ecommerce_order_items AS oi }} 
    left join {{ #ecommerce_orders AS o }} on {{#oi.order_id}} = {{#o.id}}
    left join {{ #ecommerce_products AS p }} on {{#oi.product_id}} = {{#p.id}}
  ;;

  //hello world

  dimension user_id {
    label: 'User Id'
    type: 'number'
    hidden: true
    definition: @sql {{ #SOURCE.user_id }};;
  }
  dimension order_id {
    label: 'Order Id'
    type: 'number'
    hidden: true
    definition: @sql {{ #SOURCE.order_id }};;
  }
  dimension order_created_at {
    label: 'Order Created At'
    type: 'datetime'
    hidden: false
    definition: @sql {{ #SOURCE.order_created_at }};;
  }
  dimension delivery_attempts {
    label: 'Delivery Attempts'
    type: 'number'
    hidden: true
    definition: @sql {{ #SOURCE.delivery_attempts }};;
  }
  dimension discount {
    label: '% Discount'
    description: 'Discount percentage on the total order'
    type: 'number'
    hidden: false
    definition: @sql {{ #SOURCE.discount }};;
  }
  dimension order_status {
    label: 'Order Status'
    type: 'text'
    hidden: true
    definition: @sql {{ #SOURCE.order_status }};;
  }
  dimension product_id {
    label: 'Product Id'
    type: 'number'
    hidden: true
    definition: @sql {{ #SOURCE.product_id }};;
  }
  dimension quantity {
    label: 'Item Quantity'
    type: 'number'
    hidden: false
    definition: @sql {{ #SOURCE.quantity }};;
  }

  // Custom dimensions
  dimension order_created_date {
    label: 'Order Created Date'
    type: 'date'
    hidden: false
    definition: @sql {{ #SOURCE.order_created_at }}::date;;
  }
  dimension order_created_month {
    label: 'Order Created Month'
    type: 'date'
    hidden: false
    definition: @sql date_trunc('month', {{ #SOURCE.order_created_at }}::date);;
  }
  dimension last_month {
    label: 'Last Month'
    type: 'date'
    hidden: false
    definition: @sql {{ #SOURCE.order_created_month }} - interval '1 month';;
  }
  dimension final_item_value {
    label: 'Final Item Value'
    type: 'number'
    hidden: false
    definition: @sql {{ #SOURCE.price }} * (1 - {{ #SOURCE.discount }}) ;;
  }
  // dimension order_is_delivered {
  //   label: 'Order Is Delivered'
  //   type: 'truefalse'
  //   hidden: false
  //   definition: @sql {{order_status}} = 'delivered';;
  // }

  // Custom Measures
  measure average_order_value {
    label: 'AOV'
    description: 'Average Order Value'
    type: 'number'
    definition: @aml sum(transform_order_items.final_item_value) / count_distinct(transform_order_items.order_id);;
  }
  measure pct_cancelled_value {
    label: '% Cancelled Value'
    type: 'number'
    definition: @aml 
      sum(case(when:transform_order_items.order_status == 'cancelled', then: transform_order_items.final_item_value, else: 0)) / sum(transform_order_items.final_item_value) ;;
  }
  // measure pct_cancelled_orders {
  //   label: '% Cancelled Orders'
  //   type: 'number'
  //   definition: @sql count(distinct case when {{ order_status }} = 'cancelled' then {{ #SOURCE.order_id }} else null end)::float / count(distinct {{ #SOURCE.order_id }})::float;;
  // }
  measure gross_merchandise_value {
    label: 'GMV'
    description: 'Total order value, regardless of status'
    type: 'number'
    definition: @aml sum(transform_order_items.final_item_value);;
  }
  measure net_merchandise_value {
    label: 'NMV'
    description: 'Total value of delivered orders'
    type: 'number'
    definition: @aml sum(case(when: transform_order_items.order_status == 'delivered', then: transform_order_items.final_item_value, else: 0));;
  }
  measure ordered_users_count {
    label: 'Ordered Users Count'
    description: 'Number of users with at least 1 order'
    type: 'number'
    definition: @aml count_distinct(transform_order_items.user_id);;
  }
// measure refunded_orders_count {
//   label: 'Refunded Orders Count'
//   type: 'number'
//   definition: @sql count(distinct case when {{ order_status }} = 'refunded' then {{ order_id }} else null end);;
// }
}